// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ncbaseheader

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//消息类型
//
type NcEPMSMsgType int64

const (
	NcEPMSMsgType_NC_EPMS_SEND_MSG      NcEPMSMsgType = 0
	NcEPMSMsgType_NC_EPMS_REPLY_MSG     NcEPMSMsgType = 1
	NcEPMSMsgType_NC_EPMS_SEND_SUCCESS  NcEPMSMsgType = 2
	NcEPMSMsgType_NC_EPMS_SEND_FAILED   NcEPMSMsgType = 3
	NcEPMSMsgType_NC_EPMS_NO_SUBSCRIBER NcEPMSMsgType = 4
	NcEPMSMsgType_NC_EPMS_CONNECT       NcEPMSMsgType = 5
	NcEPMSMsgType_NC_EPMS_DISCONNECT    NcEPMSMsgType = 6
	NcEPMSMsgType_NC_EPMS_HEARTBEAT     NcEPMSMsgType = 7
)

func (p NcEPMSMsgType) String() string {
	switch p {
	case NcEPMSMsgType_NC_EPMS_SEND_MSG:
		return "NC_EPMS_SEND_MSG"
	case NcEPMSMsgType_NC_EPMS_REPLY_MSG:
		return "NC_EPMS_REPLY_MSG"
	case NcEPMSMsgType_NC_EPMS_SEND_SUCCESS:
		return "NC_EPMS_SEND_SUCCESS"
	case NcEPMSMsgType_NC_EPMS_SEND_FAILED:
		return "NC_EPMS_SEND_FAILED"
	case NcEPMSMsgType_NC_EPMS_NO_SUBSCRIBER:
		return "NC_EPMS_NO_SUBSCRIBER"
	case NcEPMSMsgType_NC_EPMS_CONNECT:
		return "NC_EPMS_CONNECT"
	case NcEPMSMsgType_NC_EPMS_DISCONNECT:
		return "NC_EPMS_DISCONNECT"
	case NcEPMSMsgType_NC_EPMS_HEARTBEAT:
		return "NC_EPMS_HEARTBEAT"
	}
	return "<UNSET>"
}

func NcEPMSMsgTypeFromString(s string) (NcEPMSMsgType, error) {
	switch s {
	case "NC_EPMS_SEND_MSG":
		return NcEPMSMsgType_NC_EPMS_SEND_MSG, nil
	case "NC_EPMS_REPLY_MSG":
		return NcEPMSMsgType_NC_EPMS_REPLY_MSG, nil
	case "NC_EPMS_SEND_SUCCESS":
		return NcEPMSMsgType_NC_EPMS_SEND_SUCCESS, nil
	case "NC_EPMS_SEND_FAILED":
		return NcEPMSMsgType_NC_EPMS_SEND_FAILED, nil
	case "NC_EPMS_NO_SUBSCRIBER":
		return NcEPMSMsgType_NC_EPMS_NO_SUBSCRIBER, nil
	case "NC_EPMS_CONNECT":
		return NcEPMSMsgType_NC_EPMS_CONNECT, nil
	case "NC_EPMS_DISCONNECT":
		return NcEPMSMsgType_NC_EPMS_DISCONNECT, nil
	case "NC_EPMS_HEARTBEAT":
		return NcEPMSMsgType_NC_EPMS_HEARTBEAT, nil
	}
	return NcEPMSMsgType(0), fmt.Errorf("not a valid NcEPMSMsgType string")
}

func NcEPMSMsgTypePtr(v NcEPMSMsgType) *NcEPMSMsgType { return &v }

func (p NcEPMSMsgType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NcEPMSMsgType) UnmarshalText(text []byte) error {
	q, err := NcEPMSMsgTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *NcEPMSMsgType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = NcEPMSMsgType(v)
	return nil
}

func (p *NcEPMSMsgType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//消息配置选项
//
type NcEPMSMsgOpt int64

const (
	NcEPMSMsgOpt_NC_EPMS_ENABLE_COMPRESS NcEPMSMsgOpt = 1
	NcEPMSMsgOpt_NC_EPMS_ENABLE_ENCRYPT  NcEPMSMsgOpt = 2
)

func (p NcEPMSMsgOpt) String() string {
	switch p {
	case NcEPMSMsgOpt_NC_EPMS_ENABLE_COMPRESS:
		return "NC_EPMS_ENABLE_COMPRESS"
	case NcEPMSMsgOpt_NC_EPMS_ENABLE_ENCRYPT:
		return "NC_EPMS_ENABLE_ENCRYPT"
	}
	return "<UNSET>"
}

func NcEPMSMsgOptFromString(s string) (NcEPMSMsgOpt, error) {
	switch s {
	case "NC_EPMS_ENABLE_COMPRESS":
		return NcEPMSMsgOpt_NC_EPMS_ENABLE_COMPRESS, nil
	case "NC_EPMS_ENABLE_ENCRYPT":
		return NcEPMSMsgOpt_NC_EPMS_ENABLE_ENCRYPT, nil
	}
	return NcEPMSMsgOpt(0), fmt.Errorf("not a valid NcEPMSMsgOpt string")
}

func NcEPMSMsgOptPtr(v NcEPMSMsgOpt) *NcEPMSMsgOpt { return &v }

func (p NcEPMSMsgOpt) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NcEPMSMsgOpt) UnmarshalText(text []byte) error {
	q, err := NcEPMSMsgOptFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *NcEPMSMsgOpt) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = NcEPMSMsgOpt(v)
	return nil
}

func (p *NcEPMSMsgOpt) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//异常类型
//
type NcEPMSExceptionType int64

const (
	NcEPMSExceptionType_NC_ROOT_EXCEPTION     NcEPMSExceptionType = 0
	NcEPMSExceptionType_NC_ABORT_EXCEPTION    NcEPMSExceptionType = 1
	NcEPMSExceptionType_NC_WARN_EXCEPTION     NcEPMSExceptionType = 2
	NcEPMSExceptionType_NC_INFO_EXCEPTION     NcEPMSExceptionType = 3
	NcEPMSExceptionType_NC_IGNORE_EXCEPTION   NcEPMSExceptionType = 4
	NcEPMSExceptionType_NC_NON_CORE_EXCEPTION NcEPMSExceptionType = 5
)

func (p NcEPMSExceptionType) String() string {
	switch p {
	case NcEPMSExceptionType_NC_ROOT_EXCEPTION:
		return "NC_ROOT_EXCEPTION"
	case NcEPMSExceptionType_NC_ABORT_EXCEPTION:
		return "NC_ABORT_EXCEPTION"
	case NcEPMSExceptionType_NC_WARN_EXCEPTION:
		return "NC_WARN_EXCEPTION"
	case NcEPMSExceptionType_NC_INFO_EXCEPTION:
		return "NC_INFO_EXCEPTION"
	case NcEPMSExceptionType_NC_IGNORE_EXCEPTION:
		return "NC_IGNORE_EXCEPTION"
	case NcEPMSExceptionType_NC_NON_CORE_EXCEPTION:
		return "NC_NON_CORE_EXCEPTION"
	}
	return "<UNSET>"
}

func NcEPMSExceptionTypeFromString(s string) (NcEPMSExceptionType, error) {
	switch s {
	case "NC_ROOT_EXCEPTION":
		return NcEPMSExceptionType_NC_ROOT_EXCEPTION, nil
	case "NC_ABORT_EXCEPTION":
		return NcEPMSExceptionType_NC_ABORT_EXCEPTION, nil
	case "NC_WARN_EXCEPTION":
		return NcEPMSExceptionType_NC_WARN_EXCEPTION, nil
	case "NC_INFO_EXCEPTION":
		return NcEPMSExceptionType_NC_INFO_EXCEPTION, nil
	case "NC_IGNORE_EXCEPTION":
		return NcEPMSExceptionType_NC_IGNORE_EXCEPTION, nil
	case "NC_NON_CORE_EXCEPTION":
		return NcEPMSExceptionType_NC_NON_CORE_EXCEPTION, nil
	}
	return NcEPMSExceptionType(0), fmt.Errorf("not a valid NcEPMSExceptionType string")
}

func NcEPMSExceptionTypePtr(v NcEPMSExceptionType) *NcEPMSExceptionType { return &v }

func (p NcEPMSExceptionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NcEPMSExceptionType) UnmarshalText(text []byte) error {
	q, err := NcEPMSExceptionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *NcEPMSExceptionType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = NcEPMSExceptionType(v)
	return nil
}

func (p *NcEPMSExceptionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 连接消息（IP, PORT 直接从连接状态中获取）
//
//
// Attributes:
//  - OsVersion
//  - HostName
//  - ProcessName
//  - MachineCode
//  - IpAddr
type NcConnectionInfo struct {
	OsVersion   int32  `thrift:"osVersion,1" db:"osVersion" json:"osVersion"`
	HostName    string `thrift:"hostName,2" db:"hostName" json:"hostName"`
	ProcessName string `thrift:"processName,3" db:"processName" json:"processName"`
	MachineCode string `thrift:"machineCode,4" db:"machineCode" json:"machineCode"`
	IpAddr      string `thrift:"ipAddr,5" db:"ipAddr" json:"ipAddr"`
}

func NewNcConnectionInfo() *NcConnectionInfo {
	return &NcConnectionInfo{}
}

func (p *NcConnectionInfo) GetOsVersion() int32 {
	return p.OsVersion
}

func (p *NcConnectionInfo) GetHostName() string {
	return p.HostName
}

func (p *NcConnectionInfo) GetProcessName() string {
	return p.ProcessName
}

func (p *NcConnectionInfo) GetMachineCode() string {
	return p.MachineCode
}

func (p *NcConnectionInfo) GetIpAddr() string {
	return p.IpAddr
}
func (p *NcConnectionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NcConnectionInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OsVersion = v
	}
	return nil
}

func (p *NcConnectionInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostName = v
	}
	return nil
}

func (p *NcConnectionInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ProcessName = v
	}
	return nil
}

func (p *NcConnectionInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MachineCode = v
	}
	return nil
}

func (p *NcConnectionInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IpAddr = v
	}
	return nil
}

func (p *NcConnectionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ncConnectionInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NcConnectionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("osVersion", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:osVersion: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OsVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.osVersion (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:osVersion: ", p), err)
	}
	return err
}

func (p *NcConnectionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostName: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostName: ", p), err)
	}
	return err
}

func (p *NcConnectionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("processName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:processName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProcessName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.processName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:processName: ", p), err)
	}
	return err
}

func (p *NcConnectionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("machineCode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:machineCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.MachineCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.machineCode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:machineCode: ", p), err)
	}
	return err
}

func (p *NcConnectionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipAddr", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ipAddr: ", p), err)
	}
	if err := oprot.WriteString(string(p.IpAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ipAddr (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ipAddr: ", p), err)
	}
	return err
}

func (p *NcConnectionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NcConnectionInfo(%+v)", *p)
}

// 连接请求
//
//
// Attributes:
//  - ConnInfo
//  - ConnectType
//  - Detecttime
//  - ReconnectId
//  - GUID
type NcConnectRequest struct {
	ConnInfo    *NcConnectionInfo `thrift:"connInfo,1" db:"connInfo" json:"connInfo"`
	ConnectType int32             `thrift:"connectType,2" db:"connectType" json:"connectType"`
	Detecttime  int32             `thrift:"detecttime,3" db:"detecttime" json:"detecttime"`
	ReconnectId int64             `thrift:"reconnectId,4" db:"reconnectId" json:"reconnectId"`
	GUID        string            `thrift:"guid,5" db:"guid" json:"guid"`
}

func NewNcConnectRequest() *NcConnectRequest {
	return &NcConnectRequest{
		ReconnectId: -1,
	}
}

var NcConnectRequest_ConnInfo_DEFAULT *NcConnectionInfo

func (p *NcConnectRequest) GetConnInfo() *NcConnectionInfo {
	if !p.IsSetConnInfo() {
		return NcConnectRequest_ConnInfo_DEFAULT
	}
	return p.ConnInfo
}

func (p *NcConnectRequest) GetConnectType() int32 {
	return p.ConnectType
}

func (p *NcConnectRequest) GetDetecttime() int32 {
	return p.Detecttime
}

func (p *NcConnectRequest) GetReconnectId() int64 {
	return p.ReconnectId
}

func (p *NcConnectRequest) GetGUID() string {
	return p.GUID
}
func (p *NcConnectRequest) IsSetConnInfo() bool {
	return p.ConnInfo != nil
}

func (p *NcConnectRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NcConnectRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConnInfo = &NcConnectionInfo{}
	if err := p.ConnInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnInfo), err)
	}
	return nil
}

func (p *NcConnectRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConnectType = v
	}
	return nil
}

func (p *NcConnectRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Detecttime = v
	}
	return nil
}

func (p *NcConnectRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReconnectId = v
	}
	return nil
}

func (p *NcConnectRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.GUID = v
	}
	return nil
}

func (p *NcConnectRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ncConnectRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NcConnectRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("connInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connInfo: ", p), err)
	}
	if err := p.ConnInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connInfo: ", p), err)
	}
	return err
}

func (p *NcConnectRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("connectType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:connectType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ConnectType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.connectType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:connectType: ", p), err)
	}
	return err
}

func (p *NcConnectRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detecttime", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:detecttime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Detecttime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.detecttime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:detecttime: ", p), err)
	}
	return err
}

func (p *NcConnectRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reconnectId", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reconnectId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReconnectId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reconnectId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reconnectId: ", p), err)
	}
	return err
}

func (p *NcConnectRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:guid: ", p), err)
	}
	return err
}

func (p *NcConnectRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NcConnectRequest(%+v)", *p)
}

// 连接请求回复
//
//
// Attributes:
//  - ConnInfo
//  - ReconnectId
//  - GUID
type NcConnectReply struct {
	ConnInfo    *NcConnectionInfo `thrift:"connInfo,1" db:"connInfo" json:"connInfo"`
	ReconnectId int64             `thrift:"reconnectId,2" db:"reconnectId" json:"reconnectId"`
	GUID        string            `thrift:"guid,3" db:"guid" json:"guid"`
}

func NewNcConnectReply() *NcConnectReply {
	return &NcConnectReply{}
}

var NcConnectReply_ConnInfo_DEFAULT *NcConnectionInfo

func (p *NcConnectReply) GetConnInfo() *NcConnectionInfo {
	if !p.IsSetConnInfo() {
		return NcConnectReply_ConnInfo_DEFAULT
	}
	return p.ConnInfo
}

func (p *NcConnectReply) GetReconnectId() int64 {
	return p.ReconnectId
}

func (p *NcConnectReply) GetGUID() string {
	return p.GUID
}
func (p *NcConnectReply) IsSetConnInfo() bool {
	return p.ConnInfo != nil
}

func (p *NcConnectReply) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NcConnectReply) ReadField1(iprot thrift.TProtocol) error {
	p.ConnInfo = &NcConnectionInfo{}
	if err := p.ConnInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnInfo), err)
	}
	return nil
}

func (p *NcConnectReply) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReconnectId = v
	}
	return nil
}

func (p *NcConnectReply) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GUID = v
	}
	return nil
}

func (p *NcConnectReply) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ncConnectReply"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NcConnectReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("connInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connInfo: ", p), err)
	}
	if err := p.ConnInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connInfo: ", p), err)
	}
	return err
}

func (p *NcConnectReply) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reconnectId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reconnectId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReconnectId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reconnectId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reconnectId: ", p), err)
	}
	return err
}

func (p *NcConnectReply) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:guid: ", p), err)
	}
	return err
}

func (p *NcConnectReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NcConnectReply(%+v)", *p)
}

// EPMS 消息头
//
// EPMS 根据  【type + msgName】 判断接收到的消息是哪种类型
//            【bufLength + buffer】 为消息的实际内容，将 proto 对象转换为二进制数据块后得出
//
//     1. NC_EPMS_SEND_MSG + msgName：     由发送端发送过来的消息，EPMS 接收到后将消息通知给订阅函数
//     2. NC_EPMS_REPLY_MSG + msgName：    由发送端发送过来的回复消息，EPMS 接收到后将消息通知给发送结果回调函数
//     3. NC_EPMS_SEND_SUCCESS + msgName： 由发送端发送过来的发送成功，EPMS 接收到后将成功结果通知给发送结果回调函数
//     4. NC_EPMS_SEND_FAILED + msgName：  由发送端发送过来的发送失败，EPMS 接收到后将失败结果及错误内容通知给发送结果回调函数
//
// Attributes:
//  - MsgType
//  - MsgName
//  - SourceId
//  - ProtoName
//  - BufLength
//  - Buffer
//  - Option
type NcEPMSMsgHeader struct {
	MsgType   NcEPMSMsgType `thrift:"msgType,1" db:"msgType" json:"msgType"`
	MsgName   string        `thrift:"msgName,2" db:"msgName" json:"msgName"`
	SourceId  int64         `thrift:"sourceId,3" db:"sourceId" json:"sourceId"`
	ProtoName string        `thrift:"protoName,4" db:"protoName" json:"protoName"`
	BufLength int32         `thrift:"bufLength,5" db:"bufLength" json:"bufLength"`
	Buffer    []byte        `thrift:"buffer,6" db:"buffer" json:"buffer"`
	Option    int32         `thrift:"option,7" db:"option" json:"option"`
}

func NewNcEPMSMsgHeader() *NcEPMSMsgHeader {
	return &NcEPMSMsgHeader{}
}

func (p *NcEPMSMsgHeader) GetMsgType() NcEPMSMsgType {
	return p.MsgType
}

func (p *NcEPMSMsgHeader) GetMsgName() string {
	return p.MsgName
}

func (p *NcEPMSMsgHeader) GetSourceId() int64 {
	return p.SourceId
}

func (p *NcEPMSMsgHeader) GetProtoName() string {
	return p.ProtoName
}

func (p *NcEPMSMsgHeader) GetBufLength() int32 {
	return p.BufLength
}

func (p *NcEPMSMsgHeader) GetBuffer() []byte {
	return p.Buffer
}

func (p *NcEPMSMsgHeader) GetOption() int32 {
	return p.Option
}
func (p *NcEPMSMsgHeader) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NcEPMSMsgType(v)
		p.MsgType = temp
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MsgName = v
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ProtoName = v
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BufLength = v
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Buffer = v
	}
	return nil
}

func (p *NcEPMSMsgHeader) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Option = v
	}
	return nil
}

func (p *NcEPMSMsgHeader) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ncEPMSMsgHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NcEPMSMsgHeader) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msgType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msgType: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msgName: ", p), err)
	}
	if err := oprot.WriteString(string(p.MsgName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msgName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msgName: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sourceId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sourceId: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protoName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:protoName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProtoName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protoName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:protoName: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bufLength", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bufLength: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BufLength)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bufLength (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bufLength: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buffer", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:buffer: ", p), err)
	}
	if err := oprot.WriteBinary(p.Buffer); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buffer (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:buffer: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("option", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:option: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Option)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.option (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:option: ", p), err)
	}
	return err
}

func (p *NcEPMSMsgHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NcEPMSMsgHeader(%+v)", *p)
}

// 系统异常协议
//
//
// Attributes:
//  - ExpType
//  - CodeLine
//  - ErrID
//  - FileName
//  - Errmsg
//  - ErrProvider
//  - StackInfo
type NcEPMSException struct {
	ExpType     NcEPMSExceptionType `thrift:"expType,1" db:"expType" json:"expType"`
	CodeLine    int32               `thrift:"codeLine,2" db:"codeLine" json:"codeLine"`
	ErrID       int32               `thrift:"errID,3" db:"errID" json:"errID"`
	FileName    string              `thrift:"fileName,4" db:"fileName" json:"fileName"`
	Errmsg      string              `thrift:"errmsg,5" db:"errmsg" json:"errmsg"`
	ErrProvider string              `thrift:"errProvider,6" db:"errProvider" json:"errProvider"`
	StackInfo   []string            `thrift:"stackInfo,7" db:"stackInfo" json:"stackInfo"`
}

func NewNcEPMSException() *NcEPMSException {
	return &NcEPMSException{}
}

func (p *NcEPMSException) GetExpType() NcEPMSExceptionType {
	return p.ExpType
}

func (p *NcEPMSException) GetCodeLine() int32 {
	return p.CodeLine
}

func (p *NcEPMSException) GetErrID() int32 {
	return p.ErrID
}

func (p *NcEPMSException) GetFileName() string {
	return p.FileName
}

func (p *NcEPMSException) GetErrmsg() string {
	return p.Errmsg
}

func (p *NcEPMSException) GetErrProvider() string {
	return p.ErrProvider
}

func (p *NcEPMSException) GetStackInfo() []string {
	return p.StackInfo
}
func (p *NcEPMSException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NcEPMSException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NcEPMSExceptionType(v)
		p.ExpType = temp
	}
	return nil
}

func (p *NcEPMSException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CodeLine = v
	}
	return nil
}

func (p *NcEPMSException) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ErrID = v
	}
	return nil
}

func (p *NcEPMSException) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *NcEPMSException) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Errmsg = v
	}
	return nil
}

func (p *NcEPMSException) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ErrProvider = v
	}
	return nil
}

func (p *NcEPMSException) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StackInfo = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.StackInfo = append(p.StackInfo, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NcEPMSException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ncEPMSException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NcEPMSException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:expType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExpType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:expType: ", p), err)
	}
	return err
}

func (p *NcEPMSException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("codeLine", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:codeLine: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CodeLine)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.codeLine (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:codeLine: ", p), err)
	}
	return err
}

func (p *NcEPMSException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errID", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errID: ", p), err)
	}
	return err
}

func (p *NcEPMSException) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fileName: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fileName: ", p), err)
	}
	return err
}

func (p *NcEPMSException) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errmsg", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:errmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Errmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errmsg (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:errmsg: ", p), err)
	}
	return err
}

func (p *NcEPMSException) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errProvider", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:errProvider: ", p), err)
	}
	if err := oprot.WriteString(string(p.ErrProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errProvider (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:errProvider: ", p), err)
	}
	return err
}

func (p *NcEPMSException) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stackInfo", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stackInfo: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StackInfo)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StackInfo {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stackInfo: ", p), err)
	}
	return err
}

func (p *NcEPMSException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NcEPMSException(%+v)", *p)
}

// 系统异常协议(链式)
//
//
// Attributes:
//  - Excp
//  - Nextexcp
type NcEPMSExceptionTProto struct {
	Excp     *NcEPMSException   `thrift:"excp,1" db:"excp" json:"excp"`
	Nextexcp []*NcEPMSException `thrift:"nextexcp,2" db:"nextexcp" json:"nextexcp"`
}

func NewNcEPMSExceptionTProto() *NcEPMSExceptionTProto {
	return &NcEPMSExceptionTProto{}
}

var NcEPMSExceptionTProto_Excp_DEFAULT *NcEPMSException

func (p *NcEPMSExceptionTProto) GetExcp() *NcEPMSException {
	if !p.IsSetExcp() {
		return NcEPMSExceptionTProto_Excp_DEFAULT
	}
	return p.Excp
}

func (p *NcEPMSExceptionTProto) GetNextexcp() []*NcEPMSException {
	return p.Nextexcp
}
func (p *NcEPMSExceptionTProto) IsSetExcp() bool {
	return p.Excp != nil
}

func (p *NcEPMSExceptionTProto) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NcEPMSExceptionTProto) ReadField1(iprot thrift.TProtocol) error {
	p.Excp = &NcEPMSException{}
	if err := p.Excp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Excp), err)
	}
	return nil
}

func (p *NcEPMSExceptionTProto) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NcEPMSException, 0, size)
	p.Nextexcp = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &NcEPMSException{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Nextexcp = append(p.Nextexcp, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NcEPMSExceptionTProto) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ncEPMSExceptionTProto"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NcEPMSExceptionTProto) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("excp", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:excp: ", p), err)
	}
	if err := p.Excp.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Excp), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:excp: ", p), err)
	}
	return err
}

func (p *NcEPMSExceptionTProto) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nextexcp", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextexcp: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nextexcp)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nextexcp {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextexcp: ", p), err)
	}
	return err
}

func (p *NcEPMSExceptionTProto) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NcEPMSExceptionTProto(%+v)", *p)
}
